from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import pandas as pd
from datetime import datetime
import sys
import os
import warnings
import logging

# üîá T·∫Øt ho√†n to√†n c√°c warning v√† log kh√¥ng c·∫ßn thi·∫øt
warnings.filterwarnings("ignore")
logging.getLogger('urllib3').setLevel(logging.ERROR)
logging.getLogger('selenium').setLevel(logging.ERROR)

# T·∫Øt Chrome logs t·∫°i system level
os.environ['WDM_LOG_LEVEL'] = '0'
os.environ['WDM_PRINT_FIRST_LINE'] = 'False'

# Import centralized database system
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from database import SupabaseManager, DatabaseConfig

# Helper functions
def get_database_manager():
    """Get database manager instance"""
    return SupabaseManager()

# üîπ Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y cho Supabase
def convert_date_for_supabase(date_str):
    """Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y t·ª´ DD/MM/YYYY sang YYYY-MM-DD cho Supabase"""
    try:
        # üîß FIX: X·ª≠ l√Ω nhi·ªÅu format ng√†y kh√°c nhau
        if not date_str or date_str.strip() == "" or date_str.strip() == "-":
            print(f"‚ùå L·ªói format ng√†y: empty string")
            return None
            
        date_str = date_str.strip()
        
        # Th·ª≠ format DD/MM/YYYY
        try:
            dt = datetime.strptime(date_str, "%d/%m/%Y")
            return dt.strftime("%Y-%m-%d")
        except ValueError:
            pass
            
        # Th·ª≠ format DD-MM-YYYY  
        try:
            dt = datetime.strptime(date_str, "%d-%m-%Y")
            return dt.strftime("%Y-%m-%d")
        except ValueError:
            pass
            
        # Th·ª≠ format YYYY-MM-DD (ƒë√£ ƒë√∫ng format)
        try:
            dt = datetime.strptime(date_str, "%Y-%m-%d")
            return dt.strftime("%Y-%m-%d")
        except ValueError:
            pass
            
        print(f"‚ùå L·ªói format ng√†y: {date_str} (kh√¥ng match format n√†o)")
        return None
        
    except Exception as e:
        print(f"‚ùå L·ªói format ng√†y: {date_str} - {e}")
        return None


# üîπ H√†m upsert (insert ho·∫∑c update) v·ªõi Supabase API - return True n·∫øu c√≥ update
def upsert_stock_data(db_manager, table_name, row):
    """
    Insert ho·∫∑c Update d·ªØ li·ªáu stock v√†o Supabase
    - N·∫øu ng√†y ch∆∞a t·ªìn t·∫°i: INSERT m·ªõi
    - N·∫øu ng√†y ƒë√£ t·ªìn t·∫°i: UPDATE v·ªõi gi√° tr·ªã m·ªõi
    
    Returns:
        bool: True n·∫øu c√≥ thay ƒë·ªïi (insert ho·∫∑c update), False n·∫øu kh√¥ng thay ƒë·ªïi
    """
    try:
        formatted_date = convert_date_for_supabase(row["date"])
        if not formatted_date:
            print(f"‚ùå L·ªói format ng√†y: {row['date']}")
            return False

        # H√†m helper ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi√° sang float
        def safe_float(value_str):
            """Chuy·ªÉn ƒë·ªïi chu·ªói s·ªë c√≥ d·∫•u ph·∫©y th√†nh float"""
            if not value_str or value_str == "" or value_str == "-":
                return 0.0
            return float(str(value_str).replace(",", ""))

        # Chu·∫©n b·ªã d·ªØ li·ªáu
        data_to_upsert = {
            "date": formatted_date,
            "open_price": f"{safe_float(row['open_price']):,.0f}" if safe_float(row["open_price"]) > 0 else "EMPTY",
            "high_price": f"{safe_float(row['high_price']):,.0f}" if safe_float(row["high_price"]) > 0 else "EMPTY", 
            "low_price": f"{safe_float(row['low_price']):,.0f}" if safe_float(row["low_price"]) > 0 else "EMPTY",
            "close_price": f"{safe_float(row['close_price']):,.0f}" if safe_float(row["close_price"]) > 0 else "EMPTY",
            "change": row["change"],
            "change_pct": row["change_pct"],
            "volume": row["volume"]
        }

        supabase_client = db_manager.get_supabase_client()
        
        # Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i theo ng√†y
        existing = supabase_client.table(table_name).select("*").eq("date", formatted_date).execute()
        
        if existing.data:
            # C·∫¨P NH·∫¨T d·ªØ li·ªáu hi·ªán c√≥
            existing_record = existing.data[0]
            
            # So s√°nh ƒë·ªÉ xem c√≥ thay ƒë·ªïi kh√¥ng (s·ª≠ d·ª•ng safe comparison)
            def safe_compare(existing_val, new_val):
                """So s√°nh an to√†n gi·ªØa gi√° tr·ªã c≈© v√† m·ªõi"""
                try:
                    # N·∫øu existing_val l√† string c√≥ d·∫•u ph·∫©y, x√≥a d·∫•u ph·∫©y tr∆∞·ªõc khi so s√°nh
                    if isinstance(existing_val, str) and existing_val != "EMPTY":
                        existing_float = float(existing_val.replace(",", ""))
                    else:
                        existing_float = float(existing_val) if existing_val and existing_val != "EMPTY" else 0.0
                    
                    # N·∫øu new_val l√† string c√≥ d·∫•u ph·∫©y, x√≥a d·∫•u ph·∫©y
                    if isinstance(new_val, str) and new_val != "EMPTY":
                        new_float = float(new_val.replace(",", ""))
                    else:
                        new_float = float(new_val) if new_val and new_val != "EMPTY" else 0.0
                        
                    return existing_float != new_float
                except (ValueError, TypeError):
                    return True  # N·∫øu kh√¥ng convert ƒë∆∞·ª£c th√¨ coi nh∆∞ c√≥ thay ƒë·ªïi
            
            needs_update = (
                safe_compare(existing_record.get('close_price', 0), data_to_upsert['close_price']) or
                safe_compare(existing_record.get('open_price', 0), data_to_upsert['open_price']) or
                safe_compare(existing_record.get('high_price', 0), data_to_upsert['high_price']) or
                safe_compare(existing_record.get('low_price', 0), data_to_upsert['low_price'])
            )
            
            if needs_update:
                result = supabase_client.table(table_name).update(data_to_upsert).eq("date", formatted_date).execute()
                if result.data:
                    return True  # C√≥ c·∫≠p nh·∫≠t
                else:
                    print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {row['date']}")
                    return False
            # Kh√¥ng print g√¨ n·∫øu kh√¥ng c√≥ thay ƒë·ªïi ƒë·ªÉ tr√°nh g√¢y hi·ªÉu l·∫ßm
            return False  # Kh√¥ng c√≥ thay ƒë·ªïi
        else:
            # TH√äM M·ªöI d·ªØ li·ªáu
            result = supabase_client.table(table_name).insert(data_to_upsert).execute()
            
            if result.data:
                return True  # C√≥ th√™m m·ªõi
            else:
                print(f"‚ùå L·ªói khi th√™m: {row['date']}")
                return False
                
    except Exception as e:
        print(f"‚ùå L·ªói upsert_stock_data: {e}")
        print(f"   D·ªØ li·ªáu: {row}")
        return False

def setup_driver():
    """Setup Chrome driver v·ªõi c√°c options t·ªëi ∆∞u v√† t·∫Øt ho√†n to√†n m·ªçi log"""
    options = Options()
    options.add_argument("--headless")  # Ch·∫°y ·∫©n browser
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    
    # üîá T·∫Øt ho√†n to√†n c√°c log kh√¥ng c·∫ßn thi·∫øt
    options.add_argument("--disable-logging")
    options.add_argument("--log-level=3")  # Ch·ªâ hi·ªán FATAL errors
    options.add_argument("--silent")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-plugins")
    options.add_argument("--disable-images")
    options.add_argument("--disable-javascript-harmony-shipping")
    options.add_argument("--disable-background-timer-throttling")
    options.add_argument("--disable-backgrounding-occluded-windows")
    options.add_argument("--disable-renderer-backgrounding")
    options.add_argument("--disable-features=TranslateUI,VizDisplayCompositor")
    options.add_argument("--disable-backgrounding-occluded-windows")
    options.add_argument("--disable-background-networking")
    options.add_argument("--disable-sync")
    options.add_argument("--metrics-recording-only")
    options.add_argument("--no-first-run")
    
    # T·∫Øt WebRTC v√† c√°c services kh√°c
    options.add_argument("--disable-webrtc")
    options.add_argument("--disable-web-security")
    
    # üîá T·∫Øt DevTools v√† c√°c th√¥ng b√°o debugging
    options.add_argument("--disable-dev-tools")
    options.add_argument("--disable-remote-debugging")
    options.add_argument("--disable-remote-debugging-port")
    options.add_argument("--disable-component-extensions-with-background-pages")
    options.add_argument("--disable-default-apps")
    options.add_argument("--disable-background-mode")
    options.add_argument("--disable-hang-monitor")
    options.add_argument("--disable-prompt-on-repost")
    options.add_argument("--disable-client-side-phishing-detection")
    options.add_argument("--disable-popup-blocking")
    options.add_argument("--disable-translate")
    
    # üîá T·∫Øt ho√†n to√†n console output
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    options.add_experimental_option('useAutomationExtension', False)
    
    return webdriver.Chrome(options=options)

# Global variables for dashboard tracking
dashboard_results = []
total_start_time = None
total_start_time_str = None

def print_dashboard_header():
    """Print dashboard header"""
    print("\n" + "‚ñà" * 80)
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" + "ÔøΩ SPA VIP STOCK PRICE CRAWLER DASHBOARD".center(78) + "‚ñà")
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" + f"‚è∞ Started: {total_start_time_str}".center(78) + "‚ñà")
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" * 80)

def print_stock_progress(current, total, stock_code):
    """Print current stock progress"""
    progress_bar = "‚ñà" * int((current / total) * 30)
    empty_bar = "‚ñë" * (30 - int((current / total) * 30))
    percentage = (current / total) * 100
    
    print(f"\n‚îå‚îÄ{'‚îÄ' * 76}‚îÄ‚îê")
    print(f"‚îÇ üìä PROCESSING STOCK [{current}/{total}]: {stock_code}".ljust(77) + " ‚îÇ")
    print(f"‚îÇ Progress: [{progress_bar}{empty_bar}] {percentage:.1f}%".ljust(77) + " ‚îÇ")
    print(f"‚îî‚îÄ{'‚îÄ' * 76}‚îÄ‚îò")

def print_stock_result(stock_code, duration, updated_dates, crawled_count, status="SUCCESS"):
    """Store stock result for dashboard"""
    result = {
        'stock': stock_code,
        'status': status,
        'duration': duration,
        'updated_dates': updated_dates,
        'crawled_count': crawled_count
    }
    dashboard_results.append(result)
    
    # Print individual result
    status_icon = "‚úÖ" if status == "SUCCESS" else "‚ùå"
    update_info = f"{len(updated_dates)} updates" if updated_dates else "No changes"
    
    print(f"‚îÇ {status_icon} {stock_code}: {duration:.1f}s | {update_info} | {crawled_count} rows processed".ljust(77) + " ‚îÇ")

def print_dashboard_summary():
    """Print final dashboard summary"""
    total_end_time = time.time()
    total_end_time_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    total_duration = total_end_time - total_start_time
    
    successful_stocks = [r for r in dashboard_results if r['status'] == 'SUCCESS']
    failed_stocks = [r for r in dashboard_results if r['status'] == 'FAILED']
    total_updates = sum(len(r['updated_dates']) for r in dashboard_results)
    
    print("\n" + "‚ñà" * 80)
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" + "üéâ CRAWLING COMPLETED - SUMMARY DASHBOARD".center(78) + "‚ñà")
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" * 80)
    
    print(f"‚îå‚îÄ{'‚îÄ' * 76}‚îÄ‚îê")
    print(f"‚îÇ ‚è∞ TIMING INFORMATION".ljust(77) + " ‚îÇ")
    print(f"‚îÇ {'‚îÄ' * 76} ‚îÇ")
    print(f"‚îÇ Start Time    : {total_start_time_str}".ljust(77) + " ‚îÇ")
    print(f"‚îÇ End Time      : {total_end_time_str}".ljust(77) + " ‚îÇ")
    print(f"‚îÇ Total Duration: {total_duration:.2f}s ({total_duration/60:.1f} minutes)".ljust(77) + " ‚îÇ")
    print(f"‚îÇ Avg per Stock : {total_duration/len(dashboard_results):.2f}s".ljust(77) + " ‚îÇ")
    print(f"‚îî‚îÄ{'‚îÄ' * 76}‚îÄ‚îò")
    
    print(f"‚îå‚îÄ{'‚îÄ' * 76}‚îÄ‚îê")
    print(f"‚îÇ üìä PROCESSING STATISTICS".ljust(77) + " ‚îÇ")
    print(f"‚îÇ {'‚îÄ' * 76} ‚îÇ")
    print(f"‚îÇ Total Stocks  : {len(dashboard_results)}".ljust(77) + " ‚îÇ")
    print(f"‚îÇ Successful    : {len(successful_stocks)} ‚úÖ".ljust(77) + " ‚îÇ")
    print(f"‚îÇ Failed        : {len(failed_stocks)} ‚ùå".ljust(77) + " ‚îÇ")
    print(f"‚îÇ Total Updates : {total_updates} records".ljust(77) + " ‚îÇ")
    print(f"‚îÇ Success Rate  : {len(successful_stocks)/len(dashboard_results)*100:.1f}%".ljust(77) + " ‚îÇ")
    print(f"‚îî‚îÄ{'‚îÄ' * 76}‚îÄ‚îò")
    
    print(f"‚îå‚îÄ{'‚îÄ' * 76}‚îÄ‚îê")
    print(f"‚îÇ üìã DETAILED RESULTS".ljust(77) + " ‚îÇ")
    print(f"‚îÇ {'‚îÄ' * 76} ‚îÇ")
    for result in dashboard_results:
        status_icon = "‚úÖ" if result['status'] == 'SUCCESS' else "‚ùå"
        update_count = len(result['updated_dates'])
        update_dates = ', '.join(result['updated_dates'][:3]) + ('...' if len(result['updated_dates']) > 3 else '')
        
        print(f"‚îÇ {status_icon} {result['stock']:<4} ‚îÇ {result['duration']:>5.1f}s ‚îÇ {update_count:>2} updates ‚îÇ {result['crawled_count']:>2} rows".ljust(77) + " ‚îÇ")
        if result['updated_dates']:
            print(f"‚îÇ      ‚îî‚îÄ Dates: {update_dates}".ljust(77) + " ‚îÇ")
    print(f"‚îî‚îÄ{'‚îÄ' * 76}‚îÄ‚îò")
    
    print("\n" + "‚ñà" * 80)
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" + "üéØ STOCK PRICE CRAWLING COMPLETED SUCCESSFULLY!".center(78) + "‚ñà")
    print("‚ñà" + " " * 78 + "‚ñà")
    print("‚ñà" * 80)
def crawl_and_save_stock(stock_code, max_rows=5):
    """
    Crawl d·ªØ li·ªáu c·ªï phi·∫øu t·ª´ Simplize (ch·ªâ crawl 5 d√≤ng ƒë·∫ßu ti√™n ƒë·ªÉ t·ªëi ∆∞u)
    
    Args:
        stock_code: M√£ c·ªï phi·∫øu (VD: FPT, GAS, VCB, IMP)
        max_rows: S·ªë d√≤ng t·ªëi ƒëa c·∫ßn crawl (m·∫∑c ƒë·ªãnh: 5 ng√†y g·∫ßn nh·∫•t)
    """
    start_time = time.time()
    
    driver = setup_driver()
    db_manager = get_database_manager()

    url = f"https://simplize.vn/co-phieu/{stock_code}/lich-su-gia"
    driver.get(url)
    wait = WebDriverWait(driver, 10)
    time.sleep(2)

    table_name = f"{stock_code}_Stock"
    crawled_count = 0  # ƒê·∫øm s·ªë d√≤ng ƒë√£ crawl
    updated_dates = []  # Track c√°c ng√†y ƒë∆∞·ª£c update

    try:
        time.sleep(2)

        try:
            # ƒê·ª£i table load
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "tr.simplize-table-row-level-0")))
            
            # L·∫•y t·∫•t c·∫£ rows s·ª≠ d·ª•ng CSS selector ch√≠nh x√°c t·ª´ fix
            rows = driver.find_elements(By.CSS_SELECTOR, "tr.simplize-table-row-level-0")
                        
            for row in rows:
                # ‚ö° D·ª´ng khi ƒë√£ crawl ƒë·ªß s·ªë d√≤ng c·∫ßn thi·∫øt
                if crawled_count >= max_rows:
                    break
                    
                try:
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", row)
                    time.sleep(0.1)  # Cho DOM k·ªãp render

                    # L·∫•y d·ªØ li·ªáu t·ª´ d√≤ng hi·ªán t·∫°i
                    cols = row.find_elements(By.CSS_SELECTOR, "td")
                    if len(cols) >= 8:
                        # üîß FIX: L·∫•y text t·ª´ h6 element nh∆∞ trong fix_simplize_crawl.py
                        date = cols[0].find_element(By.TAG_NAME, "h6").text.strip()
                        values = []
                        
                        for i in range(1, 8):
                            try:
                                val = cols[i].find_element(By.TAG_NAME, "h6").text.strip()
                            except:
                                val = "-"
                            values.append(val)

                        data_row = {
                            "date": date,               # Ng√†y
                            "open_price": values[0],    # Gi√° m·ªü c·ª≠a
                            "high_price": values[1],    # Gi√° cao nh·∫•t
                            "low_price": values[2],     # Gi√° th·∫•p nh·∫•t
                            "close_price": values[3],   # Gi√° ƒë√≥ng c·ª≠a
                            "change": values[4],        # Thay ƒë·ªïi gi√°
                            "change_pct": values[5],    # % Thay ƒë·ªïi
                            "volume": values[6]         # Kh·ªëi l∆∞·ª£ng
                        }

                        # Check n·∫øu c√≥ update v√† track ng√†y
                        if upsert_stock_data(db_manager, table_name, data_row):
                            updated_dates.append(date)
                        
                        crawled_count += 1
                        
                except Exception as e:
                    print(f"‚ùå L·ªói d√≤ng: {e}")
                    continue

        except Exception as e:
            print(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu cho m√£ {stock_code}: {e}")

    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh crawl: {e}")
    finally:
        driver.quit()
        db_manager.close_connections()
        
        # T√≠nh to√°n th·ªùi gian
        end_time = time.time()
        duration = end_time - start_time
        
        # Store result simply
        result = {
            'stock': stock_code,
            'duration': duration,
            'updated_dates': updated_dates,
            'crawled_count': crawled_count
        }
        dashboard_results.append(result)
        
        # Kh√¥ng print g√¨ ·ªü ƒë√¢y, s·∫Ω hi·ªÉn th·ªã trong b·∫£ng cu·ªëi c√πng

def main_stock_simplize():
    """H√†m ch√≠nh ƒë·ªÉ crawl nhi·ªÅu m√£ c·ªï phi·∫øu - hi·ªÉn th·ªã b·∫£ng cu·ªëi c√πng"""
    global total_start_time, dashboard_results
    
    stock_codes = ["FPT","GAS","VCB","IMP"]  
    dashboard_results = []

    # B·∫Øt ƒë·∫ßu
    total_start_time = time.time()
    start_time_str = datetime.now().strftime("%H:%M:%S")
    
    print("\n" + "‚ïê" * 60)
    print("üöÄ SPA STOCK PRICE CRAWLER".center(60))
    print(f"‚è∞ Started: {start_time_str}".center(60))
    print(f"üìã Stocks: {', '.join(stock_codes)}".center(60))
    print("‚ïê" * 60)
    print("\nüîÑ Processing stocks")
    print("‚îÄ" * 60)
    
    for i, code in enumerate(stock_codes, 1):
        try:
            print(f"[{i}/{len(stock_codes)}] Crawling {code}...")
            crawl_and_save_stock(code, max_rows=5)  
            
            if i < len(stock_codes):
                time.sleep(3)
                
        except Exception as e:
            # Add failed result
            result = {
                'stock': code,
                'duration': 0,
                'updated_dates': [],
                'crawled_count': 0,
                'status': 'FAILED'
            }
            dashboard_results.append(result)
            continue
    
    # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£ cu·ªëi c√πng
    total_end_time = time.time()
    total_duration = total_end_time - total_start_time
    total_updates = sum(len(r['updated_dates']) for r in dashboard_results)
    
    print("\n" + "‚ïê" * 60)
    print("üéâ CRAWLING COMPLETED - RESULTS".center(60))
    print("‚ïê" * 60)
    
    # Table header
    print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ Code ‚îÇ Time   ‚îÇ Status       ‚îÇ Updated Dates       ‚îÇ")
    print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
    
    # Table rows
    for result in dashboard_results:
        status = result.get('status', 'SUCCESS')
        if status == 'FAILED':
            print(f"‚îÇ ‚ùå {result['stock']:<4} ‚îÇ   ERROR ‚îÇ Failed       ‚îÇ No updates          ‚îÇ")
        else:
            update_count = len(result['updated_dates'])
            if update_count > 0:
                # Hi·ªÉn th·ªã t·ªëi ƒëa 2 ng√†y ƒë·∫ßu ti√™n, n·∫øu nhi·ªÅu h∆°n th√¨ th√™m "..."
                dates_display = ', '.join(result['updated_dates'][:2])
                if update_count > 2:
                    dates_display += f" +{update_count-2} more"
                status_text = f"{update_count} updates"
            else:
                dates_display = "No changes"
                status_text = "No changes"
            
            print(f"‚îÇ ‚úÖ {result['stock']:<4} ‚îÇ {result['duration']:>6.1f}s ‚îÇ {status_text:<12} ‚îÇ {dates_display:<19} ‚îÇ")
    
    # Table footer
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    
    # Summary
    print("\n" + "‚ïê" * 60)
    print("üìä STOCK PRICE - SIMPLIZE".center(60))
    print("‚îÄ" * 60)
    print(f"‚è±Ô∏è  Total Time    : {total_duration:.1f}s ({total_duration/60:.1f} minutes)")
    print(f"üìä Total Updates : {total_updates} records")
    print(f"üìà Success Rate  : {len([r for r in dashboard_results if r.get('status', 'SUCCESS') == 'SUCCESS'])}/{len(stock_codes)} stocks")
    print(f"‚ö° Avg per Stock : {total_duration/len(stock_codes):.1f}s")
    print("‚ïê" * 60)
if __name__ == "__main__":
    main_stock_simplize()
